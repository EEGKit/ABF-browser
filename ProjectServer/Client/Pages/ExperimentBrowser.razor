@page "/ExperimentBrowser"
@using ProjectServer.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="bg-dark text-light px-3 py-2">
	<span class="pe-2" style="opacity: .5">Experiment Browser</span>
	<a href="/">Home</a>
</div>

@if (ExperimentFolder is null)
{
	<LoadingSpinner Message="Loading Experiment..." />
}
else
{
	<div class="px-2 pb-2" style="background-color: #EEEEEE; border-bottom: 1px solid #CCCCCC">
		<div class="p-2">
			<div class="fw-bold fs-3">@ExperimentFolder.Info.Title</div>
			<div class="text-muted">
				@ExperimentFolder.Info.Description
				<a class="link-primary" style="font-size: .8em; cursor:pointer">✏️</a>
			</div>
			<div><code>@FolderPath</code></div>
			<div>
				<button class="btn btn-secondary btn-sm" onclick="@(() => {ShowNotes = !ShowNotes;})">
					@(ShowNotes ? "Hide Notes" : "Show Notes")
				</button>
				<div class="d-inline-block mt-2">
					View by:
					<select @bind=View>
						<option value=@ViewType.ByDay>Day</option>
						<option value=@ViewType.ByColor>Color</option>
						<option value=@ViewType.ByTag>Tag</option>
					</select>
				</div>
			</div>

			@if (ShowNotes)
			{
				<div class="mt-3">
					<pre class="font-monospace my-1">@ExperimentFolder.Info.Notes</pre>
					<a class="link-primary">Edit Notes</a>
				</div>
			}

		</div>
	</div>
}

@if (View == ViewType.ByDay)
{
	if (@ExperimentFolder is not null)
	{
		foreach (AbfFolder folder in ExperimentFolder.AbfFolders)
		{
			string title = "📂 " + Path.GetFileName(folder.FolderPath.Replace("\\", "/"));
			<AbfParentsCard AbfParents=@folder.AbfParents Title=@title Notes=@folder.ExperimentTxt />
		}
	}
}
else if (View == ViewType.ByTag)
{
	HashSet<string> tags = new();
	foreach (var parent in AllParents)
		foreach (var tag in parent.Tags)
			tags.Add(tag);

	foreach (string tag in tags.OrderBy(x => x))
	{
		AbfParent[] matchingParents = string.IsNullOrWhiteSpace(tag)
			? AllParents.Where(x => x.Tags.Length == 0 || x.Tags.Contains(tag)).ToArray()
			: AllParents.Where(x => x.Tags.Contains(tag)).ToArray();

		string title = string.IsNullOrWhiteSpace(tag) ? "No Tag" : tag;
		<AbfParentsCard AbfParents=@matchingParents Title=@title ShowSetpath=true />

	}
}
else if (View == ViewType.ByColor)
{
	foreach (string color in AllParents.Select(x => x.Color).Distinct().OrderBy(x => x))
	{
		AbfParent[] matchingParents = AllParents.Where(x => x.Color == color).ToArray();
		string title = string.IsNullOrWhiteSpace(color) ? "No Color" : $"Color {color}";
		<AbfParentsCard AbfParents=@matchingParents Title=@title BackgroundColor=@color ShowSetpath=true />
	}
}
else
{
	<h3>unsupported view</h3>
}

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string FolderPath { get; set; } = string.Empty;

	double LoadTimeMilliseconds;

	ExperimentFolder? ExperimentFolder;

	enum ViewType { ByDay, ByTag, ByColor }

	ViewType View { get; set; } = ViewType.ByDay;

	bool ShowNotes { get; set; } = false;

	public AbfParent[] AllParents => (ExperimentFolder is null)
		? Array.Empty<AbfParent>()
		: ExperimentFolder.AbfFolders.SelectMany(x => x.AbfParents).ToArray();

	protected override async Task OnInitializedAsync()
	{
		string initialPath = string.IsNullOrEmpty(FolderPath) ? @"X:/Data" : FolderPath;
		await LoadFolder(initialPath);
	}

	private async Task LoadFolder(string path)
	{
		path = path.Replace("/", "\\");

		var sw = System.Diagnostics.Stopwatch.StartNew();
		FolderPath = path;
		string apiUrl = "/api/Experiment?path=" + FolderPath;
		ExperimentFolder = await Http.GetFromJsonAsync<ExperimentFolder>(apiUrl);
		string newUrl = $"/ExperimentBrowser?FolderPath={FolderPath}";
		if (NavigationManager.Uri != newUrl)
			NavigationManager.NavigateTo(newUrl);
		LoadTimeMilliseconds = Math.Round(sw.Elapsed.TotalMilliseconds, 3);
	}
}
@page "/AbfFolder"
@inject NavigationManager NavManager
@inject Services.ClipboardService ClipboardService
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using ProjectServer.Components;

<nav>
    <!-- navigation area -->
    <div class="p-2" style="background-color: #f1f1f1;">
        <h2>ABF Browser</h2>
        <div class="lh-1" style="font-family: Consolas; font-size: .8em; white-space: nowrap;">

            <!-- show a link to every level of the current folder -->
            @for (int i = 0; i < RootFolderPaths.Length; i++)
            {
                string path = RootFolderPaths[i];
                string folderName = (path.Length < 4) ? path.Trim('\\') : System.IO.Path.GetFileName(path);

                <div>
                    @foreach (var _ in Enumerable.Range(0, i))
                    {
                        <span>&nbsp;</span>
                    }

                    <a href='' @onclick="(()=>SetFolderPath(path))">@folderName</a>
                </div>
            }

            <!-- show sub folders if this is not an ABF folder-->
            @if (!IsAbfFolder)
            {
                @foreach (string path in SubFolderPaths)
                {
                    <div>
                        @foreach (var _ in Enumerable.Range(0, RootFolderPaths.Length))
                        {
                            <span>&nbsp;</span>
                        }
                        <a href='' @onclick="(()=>SetFolderPath(path))">@Path.GetFileName(path)</a>
                    </div>
                }
            }
        </div>

        <button class="button-small" @onclick="(()=>ClipboardService.WriteTextAsync(FolderPath))">copy path</button>
    </div>

    <!-- ABF list -->
    @if (IsAbfFolder)
    {
        <h2 class="p-2">ABF Folder</h2>
        <CellsMenu FolderPath=@FolderPath OnSelectParent=@OnSelectParent @ref="CellsMenuRef" />
    }
</nav>

<main>
    @if (IsAbfFolder)
    {
        @if (SelectedParent is not null)
        {
            <CellDetails Parent=@SelectedParent OnInfoChanged=@OnInfoChanged @ref="CellsDetailsRef" />
        }
        else
        {
            <AbfDayInfo FolderPath=@FolderPath />
        }
    }
    else
    {
        <h2 class="p-2">Folder does not contain ABF files</h2>
    }
</main>

@code {
    string FolderPath = string.Empty;
    string[] RootFolderPaths = Array.Empty<string>();

    string[] SubFolderPaths = Array.Empty<string>();
    string[] FilePaths = Array.Empty<string>();
    bool IsAbfFolder;
    Domain.AbfParentInfo? SelectedParent = null;
    CellsMenu CellsMenuRef = null!;
    CellDetails CellsDetailsRef = null!;

    protected override void OnInitialized()
    {
        string initialPath = @"X:\Data\zProjects\Aging and Cholinergics\experiments\10 uM CCh (bath app)";
        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        StringValues queryValues;
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("folder", out queryValues))
            initialPath = queryValues.First();
        SetFolderPath(initialPath);
    }

    /// <summary>
    /// Load a folder path in the viewer.
    /// If it is an ABF folder, display it as such.
    /// If not, display it as a file browser.
    /// </summary>
    /// <param name="path"></param>
    private void SetFolderPath(string path)
    {
        // scan the folder
        FolderPath = path;
        RootFolderPaths = GetRootFolderPaths(path);
        SubFolderPaths = Directory.GetDirectories(path);
        FilePaths = Directory.GetFiles(path);
        IsAbfFolder = FilePaths.Where(x => x.EndsWith(".abf")).Any();

        // update the URL
        try
        {
            NavManager.NavigateTo($"/AbfFolder?folder={path}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"URL UPDATE FAILED: {ex}");
        }
    }

    /// <summary>
    /// Return full paths for every folder level of the given path
    /// </summary>
    private static string[] GetRootFolderPaths(string path)
    {
        List<string> paths = new();
        while (!string.IsNullOrEmpty(path))
        {
            paths.Insert(0, path);
            path = Path.GetDirectoryName(path) ?? string.Empty;
        }
        return paths.ToArray();
    }

    /// <summary>
    /// Called when the user clicks a parent in the menu
    /// </summary>
    private void OnSelectParent(AbfParentInfo parent)
    {
        SelectedParent = parent;
    }

    /// <summary>
    /// Called when cells.txt has been modified
    /// </summary>
    private void OnInfoChanged()
    {
        CellsMenuRef.PopulateMenu();
    }
}

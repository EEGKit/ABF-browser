@foreach (string heading in Parents.Select(x => x.Header).Distinct())
{
    @if (!string.IsNullOrWhiteSpace(heading))
    {
        <h2 class="ps-2">@heading</h2>
    }

    @foreach (AbfParentInfo parent in Parents.Where(x => x.Header == heading))
    {
        <CellsMenuItem ShowHeading=false
               Parent=parent
               IsSelected="parent == SelectedParent"
               OnSelected="() => SelectParent(parent)" />
    }
}

@code {
    [Parameter, EditorRequired]
    public string FolderPath { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public EventCallback<AbfParentInfo> OnSelectParent { get; set; }

    private Domain.AbfParentInfo[] Parents = Array.Empty<Domain.AbfParentInfo>();

    private Domain.AbfParentInfo? SelectedParent = null;

    protected override void OnInitialized()
    {
        PopulateMenu();
    }

    public void PopulateMenu()
    {
        string originallySelectedAbfID = SelectedParent is null ? string.Empty : SelectedParent.AbfID;

        string cellsFilePath = Path.Combine(FolderPath, "cells.txt");
        string cellsTxt = File.Exists(cellsFilePath) ? File.ReadAllText(cellsFilePath) : string.Empty;
        var cells = new Core.CellsFile(cellsTxt);

        List<Domain.AbfParentInfo> parents = new();
        foreach (var kvp in Core.Parents.GetAbfsByParent(FolderPath))
        {
            string abfID = kvp.Key;
            string[] childPaths = kvp.Value;

            Domain.AbfParentInfo abfInfo;

            var knownCell = cells.Lookup(abfID);
            if (knownCell is null)
            {
                abfInfo = new(childPaths.First(), string.Empty, string.Empty, string.Empty, Array.Empty<string>(), childPaths);
            }
            else
            {
                abfInfo = new(childPaths.First(), knownCell.Heading, knownCell.Color, knownCell.Comment, knownCell.Tags, childPaths);
            }

            parents.Add(abfInfo);
        }

        Parents = parents.ToArray();

        if (!string.IsNullOrEmpty(originallySelectedAbfID))
        {
            AbfParentInfo[] matchingParents = Parents.Where(x => x.AbfID == originallySelectedAbfID).ToArray();
            if (matchingParents.Any())
                SelectParent(matchingParents.First());
        }
    }

    private void SelectParent(AbfParentInfo parent)
    {
        SelectedParent = parent;
        OnSelectParent.InvokeAsync(parent);
    }
}

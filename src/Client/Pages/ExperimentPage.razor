@page "/Experiment"
@using ProjectServer.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Experiment</PageTitle>

@if (ExperimentFolder is null)
{
	<LoadingSpinner Message="Loading Multi-Folder Experiment..." />
}
else
{
	<div class="px-2" style="background-color: #EEEEEE; border-bottom: 1px solid #CCCCCC">

		<div class="d-flex justify-content-between">
			<div class="fw-bold">
				@ExperimentFolder.Title
				<a data-bs-toggle="modal" data-bs-target="#editExperimentModal" style="cursor: pointer" @onclick=ExperimentEditorOpened>
					✏️
				</a>
			</div>
			<div>
				<a href="/">Home Page</a>
			</div>
		</div>

		<div>
			@ExperimentFolder.Description
		</div>

		<div>
			<code>@FolderPath</code>
		</div>

		<div class="text-muted">
			<pre class="font-monospace my-1">@ExperimentFolder.Notes</pre>
		</div>
	</div>

	<div class="m-2">
		Group by:
		<select @bind=View>
			<option value=@ViewType.ByDay>Day</option>
			<option value=@ViewType.ByColor>Color</option>
			<option value=@ViewType.ByTag>Tag</option>
		</select>
	</div>

	<ExperimentEditorModal OnSave=ExperimentEditsSaved @ref="EditorModal" />
}

@if (View == ViewType.ByDay)
{
	if (@ExperimentFolder is not null)
	{
		foreach (AbfFolder folder in ExperimentFolder.AbfFolders)
		{
			string title = "📂 " + Path.GetFileName(folder.FolderPath.Replace("\\", "/"));
			<AbfParentsCard AbfParents=@folder.AbfParents Title=@title Notes=@folder.ExperimentTxt />
		}
	}
}
else if (View == ViewType.ByTag)
{
	foreach (string tag in GetUniqueTags())
	{
		if (string.IsNullOrWhiteSpace(tag))
		{
			AbfParent[] parentsWithoutTags = AllParents.Where(x => x.Tags is null || x.Tags.Length == 0).ToArray();
			if (parentsWithoutTags.Any())
			{
				<AbfParentsCard AbfParents=@parentsWithoutTags Title="No Tag" ShowSetpath=true />
			}
		}
		else
		{
			AbfParent[] parentsWithTag = AllParents.Where(x => x.Tags.Contains(tag)).ToArray();
			<AbfParentsCard AbfParents=@parentsWithTag Title=@tag ShowSetpath=true />
		}
	}
}
else if (View == ViewType.ByColor)
{
	foreach (string color in AllParents.Select(x => x.Color).Distinct().OrderBy(x => x))
	{
		AbfParent[] matchingParents = AllParents.Where(x => x.Color == color).ToArray();
		string title = string.IsNullOrWhiteSpace(color) ? "No Color" : $"Color {color}";
		<AbfParentsCard AbfParents=@matchingParents Title=@title BackgroundColor=@color ShowSetpath=true />
	}
}
else
{
	<h3>unsupported view</h3>
}

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string FolderPath { get; set; } = string.Empty;

	ExperimentFolder? ExperimentFolder;

	enum ViewType { ByDay, ByTag, ByColor }

	ViewType View { get; set; } = ViewType.ByDay;

	ExperimentEditorModal? EditorModal = null;

	public AbfParent[] AllParents => (ExperimentFolder is null)
		? Array.Empty<AbfParent>()
		: ExperimentFolder.AbfFolders.SelectMany(x => x.AbfParents).ToArray();

	private string[] GetUniqueTags()
	{
		HashSet<string> tags = new();

		foreach (AbfParent parent in AllParents)
			foreach (string tag in parent.Tags)
				tags.Add(tag);

		return tags.OrderBy(x => x).ToArray();
	}

	protected override async Task OnInitializedAsync()
	{
		string initialPath = string.IsNullOrEmpty(FolderPath) ? @"X:/Data" : FolderPath;
		await ReloadExperiment(initialPath, false);
	}

	private async Task ReloadExperiment(string path, bool updateUrl)
	{
		path = path.Replace("/", "\\");
		FolderPath = path;

		string apiUrl = "/api/Experiment?path=" + FolderPath;
		ExperimentFolder = await Http.GetFromJsonAsync<ExperimentFolder>(apiUrl);

		if (updateUrl)
			NavigationManager.NavigateTo($"/Experiment?FolderPath={FolderPath}");
	}

	private void ExperimentEditorOpened()
	{
		if (EditorModal is null)
			return;

		if (ExperimentFolder is null)
			return;

		EditorModal.PopulateFields(ExperimentFolder);
	}

	private async Task ExperimentEditsSaved()
	{
		if (EditorModal is null)
			return;

		Shared.DTOs.ExperimentInfo info = EditorModal.GetUpdatedInfo();
		HttpResponseMessage response = await Http.PutAsJsonAsync("/api/Experiment", info);
		Console.WriteLine(response);

		await ReloadExperiment(FolderPath, false);
	}
}
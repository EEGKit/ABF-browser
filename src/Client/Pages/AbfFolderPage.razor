@page "/AbfFolder"
@using ProjectServer.Shared
@using ProjectServer.Client.Components.SingleFolderBrowser
@using ProjectServer.Client.Components.AbfList
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>ABF Folder</PageTitle>

@if (SelectedFolder is null)
{
	<LoadingSpinner Message="Loading ABF Folder..." />
}
else
{
	<FolderNavigator OnPathChangedCallback=LoadFolder AbfFolder=@SelectedFolder />

	@if (@IsAbfFolder)
	{
		<!-- two-column layout where content of the first two elements can independently scroll vertically -->
		<div style="display: grid; grid-template-rows: auto; grid-template-columns: 250px auto;">

			<!-- LEFT SIDE OF PAGE -->
			<nav style="height: 80vh; overflow-x:hidden; overflow-y: auto; overflow: auto;">
				<ParentList AbfParents=AbfParents OnAbfSelectedCallback=SelectParent />
			</nav>

			<!-- RIGHT SIDE OF PAGE -->
			<main>
				@if (SelectedParent is null)
				{
					<ExperimentInfo AbfFolder=@SelectedFolder />
				}
				else
				{
					<div class="p-2" style="background-color: @SelectedParent.Color; font-family: 'Arial'; font-size: 1.5em; font-weight: 600;">
						@SelectedParent.AbfID
					</div>
					<AbfParentEditor AbfParent=@SelectedParent OnAbfEdited="@OnAbfEdited" />
					<AbfInfoList AbfParent=@SelectedParent />
					<AnalysisThumbnails AbfParent=@SelectedParent />
				}
			</main>

		</div>
	}
}

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string FolderPath { get; set; } = string.Empty;

	private AbfParent[] AbfParents => SelectedFolder?.AbfParents ?? Array.Empty<AbfParent>();

	private AbfFolder? SelectedFolder { get; set; } = null;

	private AbfParent? SelectedParent { get; set; } = null;

	private bool IsAbfFolder => (SelectedFolder is not null && SelectedFolder.AbfFilePaths.Any());

	protected override async Task OnInitializedAsync()
	{
		string initialPath = string.IsNullOrEmpty(FolderPath) ? @"X:/Data" : FolderPath;
		await LoadFolder(initialPath);
	}

	private void SelectParent(string abfid)
	{
		var matchingParents = AbfParents.Where(x => x.AbfID == abfid);
		SelectedParent = matchingParents.Any() ? matchingParents.First() : null;
	}

	private async Task LoadFolder(string path)
	{
		var sw = System.Diagnostics.Stopwatch.StartNew();
		FolderPath = path.Replace("/", "\\");
		string apiUrl = "/api/AbfFolder?path=" + FolderPath;
		SelectedFolder = await Http.GetFromJsonAsync<AbfFolder>(apiUrl);
		NavigationManager.NavigateTo(NavigationManager.Uri + $"?FolderPath={FolderPath}");
		SelectedParent = null;
		StateHasChanged();
	}

	private void OnAbfEdited()
	{
		StateHasChanged();
	}
}

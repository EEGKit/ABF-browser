@page "/Project"
@using ProjectServer.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (ProjectFolder is null)
{
	<LoadingSpinner Message="Loading Project..." />
}
else
{
	<div class="px-2 pb-2" style="background-color: #EEEEEE; border-bottom: 1px solid #CCCCCC">
		<div class="p-2">
			<div class="fw-bold fs-3">@ProjectFolder.Title</div>
			<div class="text-muted">
				<span>@ProjectFolder.Description</span>
				<a data-bs-toggle="modal" data-bs-target="#editProjectModal" style="cursor: pointer" @onclick=ProjectEditorOpened>
					✏️
				</a>
			</div>
			<div><code>@FolderPath</code></div>
		</div>
	</div>

	<div class="mx-3 mt-3">
		<h3>Experiments</h3>
		<div>Only folders containing <code>experiment.json</code> are shown here.</div>
		@foreach (ExperimentFolder experiment in ProjectFolder.Experiments)
		{
			<div class="mx-3 p-2 my-4 bg-light border rounded shadow-sm" style="border-left: 5px solid #CCC">
				<div>
					<a href="/Experiment?FolderPath=@experiment.FolderPath" class="fw-bold">
						@experiment.Title
					</a>
				</div>
				<div>
					@experiment.Description
				</div>
				<div>
					<code>@experiment.FolderPath</code>
				</div>
			</div>
		}
	</div>

	<div class="mx-3 mt-3">
		<h3>Folders</h3>
		<div>Folders here may contain experiments that lack <code>experiment.json</code> describing them.</div>
		<div>Click a folder to add information required to convert it to an experiment.</div>
		<ul class="mt-2">
			@foreach (string folderPath in ProjectFolder.ExperimentFoldersScanned)
			{
				string safePath = folderPath.Replace("/", "\\");
				if (safePath == FolderPath)
					continue;

				<li>
					<div class="font-monospace">
						<a href="/Experiment?FolderPath=@folderPath">
							@folderPath
						</a>
					</div>
				</li>
			}
		</ul>
	</div>

	@if (!string.IsNullOrWhiteSpace(@ProjectFolder.Notes))
	{
		<div class="mx-3 mt-5">
			<h3>Notes</h3>
			<div class="px-3">
				<pre>@ProjectFolder.Notes</pre>
			</div>
		</div>
	}

	<ProjectEditorModal OnSave=ProjectEditsSaved @ref="EditorModal" />
}

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string FolderPath { get; set; } = string.Empty;

	ProjectFolder? ProjectFolder;

	ProjectEditorModal EditorModal = null!;

	protected override async Task OnInitializedAsync()
	{
		await ReloadProject();
	}

	async Task ReloadProject()
	{
		FolderPath = string.IsNullOrEmpty(FolderPath) ? @"X:/Data" : FolderPath;
		FolderPath = FolderPath.Replace("/", "\\");
		string apiUrl = "/api/Project?path=" + FolderPath;
		ProjectFolder = await Http.GetFromJsonAsync<ProjectFolder>(apiUrl);
	}

	void ProjectEditorOpened()
	{
		if (ProjectFolder is not null)
			EditorModal.PopulateFields(ProjectFolder);
	}

	async Task ProjectEditsSaved()
	{
		if (ProjectFolder is null)
			return;

		Shared.DTOs.ProjectInfo info = EditorModal.GetUpdatedInfo();
		HttpResponseMessage response = await Http.PutAsJsonAsync("/api/Project", info);
		await ReloadProject();
	}
}
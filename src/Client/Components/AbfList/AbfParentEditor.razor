<!--
	This component is sometimes displayed at the top of a parent ABF list.
	It had options to edit the parent's record: color, comments, and tags.
-->
@using ProjectServer.Shared

<div class="border-bottom p-2" style="background-color: #E6E6E6;">
	<div class="d-flex flex-row form-check p-0 m-0">
		@foreach (string color in CellsTxt.GetDefaultColors())
		{
			string thisColor = color;
			<div class="px-2 me-1 mt-1 mb-2" style="background-color: @color; border: 1px solid #bebebe;">
				<input class="form-check-input p-0"
				   style="margin: 10px 3px;"
				   type="radio"
				   name="radioColor"
				   checked="@(color == SelectedColor)"
				   onchange="@(()=>NewColorSelected(thisColor))">
			</div>
		}
	</div>

	<div class="d-flex">
		<input type="text" class="flex-fill form-control form-control-sm d-inline-block" placeholder="comment" @bind-value=CommentInputValue>
		<button type="button" class="flex-fill btn btn-primary btn-sm ms-2" onclick="@(async () => {await SetColorAndComment();})">Save</button>
		<button type="button" class="flex-fill btn btn-secondary btn-sm ms-2" @onclick=ResetAllInputs>Cancel</button>
	</div>

	<div class="mt-2">
		<input type="text" class="form-control form-control-sm w-25 d-inline-block" placeholder="tag" @bind-value=TagInputValue>
		<button type="button" class="flex-fill btn btn-primary btn-sm me-1" onclick="@(async () => {await AddTag();})">Add Tag</button>
		@foreach (string tag in @AbfParent.Tags.Where(x => !string.IsNullOrWhiteSpace(x)))
		{
			<span class="badge rounded-pill text-bg-secondary mx-1">
				<span>@tag</span>
				<span style="cursor: pointer" onclick="@(async ()=>{await DeleteTag(tag);})">❌</span>
			</span>
		}
	</div>
</div>

@code {
	[Parameter]
	[EditorRequired]
	public AbfParent AbfParent { get; set; } = new();

	[Parameter]
	[EditorRequired]
	public EventCallback<string> OnAbfEdited { get; set; }

	string TagInputValue { get; set; } = string.Empty;

	string CommentInputValue { get; set; } = string.Empty;

	string SelectedColor { get; set; } = string.Empty;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		ResetAllInputs();
	}

	private void NewColorSelected(string color)
	{
		Console.WriteLine($"SELECTING COLOR: {color}");
		SelectedColor = color;
		StateHasChanged();
	}

	private async Task AddTag()
	{
		if (!string.IsNullOrWhiteSpace(TagInputValue))
		{
			AbfParent.Tags = AbfParent.Tags.Append(TagInputValue).ToArray();
			StateHasChanged();
			await OnAbfEdited.InvokeAsync();
		}
	}

	private async Task DeleteTag(string tag)
	{
		AbfParent.Tags = AbfParent.Tags.Where(x => x != tag).ToArray();
		StateHasChanged();
		await OnAbfEdited.InvokeAsync();
	}

	private async Task SetColorAndComment()
	{
		AbfParent.Color = SelectedColor;
		AbfParent.Comment = CommentInputValue;
		StateHasChanged();
		await OnAbfEdited.InvokeAsync();
	}

	private void ResetAllInputs()
	{
		SelectedColor = AbfParent.Color;
		CommentInputValue = AbfParent.Comment;
		TagInputValue = string.Empty;
		StateHasChanged();
	}
}

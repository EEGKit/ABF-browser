@using ProjectServer.Shared
@inject HttpClient Http

@if (AbfFolder is null)
{
	<LoadingSpinner Message="Loading Experiment Notes..." />
}
else
{
	<main class="px-3">

		<h3 class="my-3 fs-3 lh-1">Experiment Notes</h3>

		<!--<div class="lh-1 mb-3"><code>@AbfFolder?.FolderPath\experiment.txt</code></div>-->
		@if (!ExperimentFileExists)
		{
			<div class="alert alert-warning my-4 d-inline-block" role="alert">
				<strong>⚠️ WARNING:</strong> Experiment notes file does not exist!
			</div>
		}

		<div class="container">

			@if (IsEditingRaw)
			{
				<div><code>@ExperimentTxtFilePath</code></div>

				<div class="card my-2">
					<div class="card-header" style="background-color: #e9ecef;">
						Experiment.txt
					</div>
					<div class="card-body p-0">
						<textarea class="form-control m-0 border-0 font-monospace bg-light" style="height: 300px;" @bind=EditRawTxt></textarea>
					</div>
				</div>
			}
			else
			{
				<div class="row">
					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Species</span>
							<input type="text" class="form-control" @bind=EditSpecies>
						</div>
					</div>

					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Strain</span>
							<input type="text" class="form-control" @bind="@EditStrain">
						</div>
					</div>

					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Date</span>
							<input type="text" class="form-control" @bind="@EditDate">
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Genotype</span>
							<input type="text" class="form-control" @bind="@EditGenotype">
						</div>
					</div>

					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">DOB</span>
							<input type="text" class="form-control" @bind="@EditDOB">
						</div>
					</div>

					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Sex</span>
							<input type="text" class="form-control" @bind="@EditSex">
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Rig</span>
							<input type="text" class="form-control" @bind="@EditRig">
						</div>
					</div>

					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Experimenter</span>
							<input type="text" class="form-control" @bind="@EditExperimenter">
						</div>
					</div>

					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Internal</span>
							<input type="text" class="form-control" @bind="@EditInternal">
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">External</span>
							<input type="text" class="form-control" @bind="@EditExternal">
						</div>
					</div>

					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Cage Card</span>
							<input type="text" class="form-control" @bind="@EditCageCard">
						</div>
					</div>

					<div class="col-md">
						<div class="input-group mb-3 input-group col-3">
							<span class="input-group-text" id="basic-addon1">Intervention</span>
							<input type="text" class="form-control" @bind="@EditIntervention">
						</div>
					</div>
				</div>

				<div class="card">
					<div class="card-header" style="background-color: #e9ecef;">
						Additional Notes
					</div>
					<div class="card-body p-0">
						<textarea class="form-control m-0 border-0" style="height: 300px;" @bind=EditNotes></textarea>
					</div>
				</div>
			}

			<div class="mt-3 d-flex justify-content-between">

				<div class="form-check">
					<input class="form-check-input" type="checkbox" id="flexCheckChecked" @bind-value="@IsEditingRaw">
					<label class="form-check-label" for="flexCheckChecked">Edit raw text</label>
				</div>

				<div>
					<button class="btn btn-secondary" @onclick=Reset>Reset</button>
					<button class="btn btn-primary" @onclick=Save>Save</button>
				</div>
			</div>

			<div class="text-end text-muted">
				@SaveMessage
			</div>

		</div>

	</main>
}

@code {
	[Parameter]
	[EditorRequired]
	public AbfFolder? AbfFolder
	{
		get => _abfFolder;
		set
		{
			_abfFolder = value;
			SaveMessage = string.Empty;
			PopulateFormFieldsFromAbfParent();
		}
	}

	private AbfFolder? _abfFolder = null;

	private bool ExperimentFileExists => !string.IsNullOrWhiteSpace(AbfFolder?.ExperimentTxt);

	private string ExperimentTxtFilePath => AbfFolder is not null ? @AbfFolder.FolderPath + "\\experiment.txt" : string.Empty;

	private string SaveMessage { get; set; } = string.Empty;

	private bool IsEditingRaw { get; set; } = false;

	private string EditSpecies { get; set; } = string.Empty;

	private string EditStrain { get; set; } = string.Empty;

	private string EditDate { get; set; } = string.Empty;

	private string EditGenotype { get; set; } = string.Empty;

	private string EditDOB { get; set; } = string.Empty;

	private string EditSex { get; set; } = string.Empty;

	private string EditRig { get; set; } = string.Empty;

	private string EditExperimenter { get; set; } = string.Empty;

	private string EditInternal { get; set; } = string.Empty;

	private string EditExternal { get; set; } = string.Empty;

	private string EditCageCard { get; set; } = string.Empty;

	private string EditIntervention { get; set; } = string.Empty;

	private string EditNotes { get; set; } = string.Empty;

	private string EditRawTxt { get; set; } = string.Empty;

	private void PopulateFormFieldsFromAbfParent()
	{
		if (AbfFolder is null)
			return;

		AbfDayNotes notes = AbfDayNotes.FromTxt(AbfFolder.ExperimentTxt);
		EditSpecies = notes.Species;
		EditStrain = notes.Strain;
		EditDate = notes.Date;
		EditGenotype = notes.Genotype;
		EditDOB = notes.DOB;
		EditSex = notes.Sex;
		EditRig = notes.Rig;
		EditExperimenter = notes.Experimenter;
		EditInternal = notes.Internal;
		EditExternal = notes.External;
		EditCageCard = notes.CageCard;
		EditIntervention = notes.Intervention;
		EditNotes = notes.Notes;
		EditRawTxt = AbfFolder?.ExperimentTxt ?? string.Empty;

	}

	private void Reset()
	{
		PopulateFormFieldsFromAbfParent();
		SaveMessage = "Loaded experiment notes";
	}

	private void Save()
	{
		if (AbfFolder is null)
			return;

		if (IsEditingRaw)
		{
			AbfFolder.ExperimentTxt = EditRawTxt;

			SaveMessage = "Saved raw text experiment notes";
		}
		else
		{
			AbfDayNotes notes = new();
			notes.Species = EditSpecies;
			notes.Strain = EditStrain;
			notes.Date = EditDate;
			notes.Genotype = EditGenotype;
			notes.DOB = EditDOB;
			notes.Sex = EditSex;
			notes.Rig = EditRig;
			notes.Experimenter = EditExperimenter;
			notes.Internal = EditInternal;
			notes.External = EditExternal;
			notes.CageCard = EditCageCard;
			notes.Intervention = EditIntervention;
			notes.Notes = EditNotes;
			AbfFolder.ExperimentTxt = notes.GetTxt();

			SaveMessage = "Saved experiment notes";
		}

		PopulateFormFieldsFromAbfParent();
	}
}

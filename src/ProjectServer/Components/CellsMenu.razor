@inject NavigationManager NavManager
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;

@foreach (string heading in Parents.Select(x => x.Header).Distinct().OrderBy(x => x))
{
    @if (!string.IsNullOrWhiteSpace(heading))
    {
        <h2 class="ps-2 mt-3">@heading</h2>
    }

    @foreach (AbfParentInfo parent in Parents.Where(x => x.Header == heading))
    {
        <CellsMenuItem ShowHeading=false
               Parent=parent
               IsSelected="parent == SelectedParent"
               OnSelected="() => SelectParent(parent)" />
    }
}

@code {
    [Parameter, EditorRequired]
    public string FolderPath { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public EventCallback<AbfParentInfo> OnSelectParent { get; set; }

    private Domain.AbfParentInfo[] Parents = Array.Empty<Domain.AbfParentInfo>();

    private Domain.AbfParentInfo? SelectedParent = null;

    protected override void OnInitialized()
    {
        PopulateMenu();
    }

    public void PopulateMenu()
    {
        string originallySelectedAbfID = string.Empty;

        if (SelectedParent is null)
        {
            // try to get it from the query string
            Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("abfid", out StringValues folderQueryValues))
                originallySelectedAbfID = folderQueryValues.First();
        }
        else
        {
            originallySelectedAbfID = SelectedParent.AbfID;
        }

        Parents = AbfParentInfo.GetParentsInFolder(FolderPath);

        if (!string.IsNullOrEmpty(originallySelectedAbfID))
        {
            AbfParentInfo[] matchingParents = Parents.Where(x => x.AbfID == originallySelectedAbfID).ToArray();
            if (matchingParents.Any())
                SelectParent(matchingParents.First());
        }
    }

    private void SelectParent(AbfParentInfo parent)
    {
        SelectedParent = parent;
        OnSelectParent.InvokeAsync(parent);
    }
}

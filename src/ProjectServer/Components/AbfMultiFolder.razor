@using ProjectServer.Components.AbfGrouping;

<div class="bg-light border rounded m-2 p-2">

    <div class="fs-3 fw-bolder">Multi-Folder ABF Explorer</div>

    <div class="d-flex">

        <div class="form-check pe-3">
            <input class="form-check-input" type="checkbox" @bind=ShowParents>
            <label class="form-check-label">
                Parents
            </label>
        </div>

        <div class="form-check pe-3">
            <input class="form-check-input" type="checkbox" @bind=ShowNotes>
            <label class="form-check-label">
                Notes
            </label>
        </div>

        <select class="form-select" @bind=SelectedStrategy style="width: 200px;">
            @foreach (string strategyName in GroupStrategies.Keys)
            {
                <option value="@strategyName">@strategyName</option>
            }
        </select>

    </div>

</div>

@if (IsScanning)
{
    <Spinner />
}

@foreach (AbfGroup group in GroupStrategies[SelectedStrategy].GetGroupedAbfs(Parents))
{
    <GroupedAbfs Group=group ShowParents=ShowParents ShowNotes=ShowNotes />
}

@code {
    [Parameter, EditorRequired]
    public string FolderPath { get; set; } = string.Empty;

    Dictionary<string, AbfParentInfo[]> ParentsByPath = new();

    Dictionary<string, string> NotesByPath = new();

    AbfParentInfo[] Parents => ParentsByPath.Values.SelectMany(x => x).ToArray();

    bool IsScanning { get; set; } = true;

    bool ShowParents { get; set; } = true;

    bool ShowNotes { get; set; } = true;

    Dictionary<string, IGroupStrategy> GroupStrategies = new()
        {
            {"By Folder" , new GroupByFolder() },
            {"By Color" , new GroupByColor() },
            {"By Header" , new GroupByHeader() },
            {"By Tag" , new GroupByTag() },
        };

    string SelectedStrategy { get; set; } = "By Folder";

    protected override Task OnInitializedAsync()
    {
        return Task.Run(() => Scan());
    }

    private void Scan()
    {
        string[] dirs = Directory.GetDirectories(FolderPath);

        foreach (string subFolderPath in dirs)
        {
            AbfParentInfo[] parents = AbfParentInfo.GetParentsInFolder(subFolderPath);
            if (parents.Any())
            {
                ParentsByPath[subFolderPath] = parents;
                NotesByPath[subFolderPath] = Core.AbfExperimentFile.FromFolder(subFolderPath).GetText();
            }
        }

        IsScanning = false;
    }
}

@using ProjectServer.Components.AbfGrouping;

<div class="">
    <div class="py-2 px-3 shadow-sm" style="background-color: #f1f1f1; border-bottom: 1px solid #CCCCCC;">

        <div class="fs-3 fw-bolder">Multi-Folder ABF Explorer</div>

        <div class="d-flex align-items-center">

            <div class="me-1">
                Group by:
            </div>

            <select class="form-select me-3" @bind=SelectedStrategy style="width: 130px;">
                @foreach (string strategyName in GroupStrategies.Keys)
                {
                    <option value="@strategyName">@strategyName</option>
                }
            </select>

            <div class="form-check pe-3">
                <input class="form-check-input" type="checkbox" @bind=ShowParents>
                <label class="form-check-label">
                    Parents
                </label>
            </div>

            @if (SelectedStrategy == "Folder")
            {
                <div class="form-check pe-3">
                    <input class="form-check-input" type="checkbox" @bind=ShowNotes>
                    <label class="form-check-label">
                        Notes
                    </label>
                </div>
            }
            
            <div class="form-check pe-3">
                <input class="form-check-input" type="checkbox" @bind=ShowMeta>
                <label class="form-check-label">
                    Meta
                </label>
            </div>

        </div>

    </div>
</div>

@if (IsScanning)
{
    <Spinner />
}

@if (ShowMeta)
{
    <ExperimentNotesTxt FolderPath="@FolderPath" />
    <ExperimentNotesJson FolderPath="@FolderPath" />
}

@foreach (AbfGroup group in GroupStrategies[SelectedStrategy].GetGroupedAbfs(Parents).Where(x => x.Parents.Any()))
{
    <GroupedAbfs Group=group ShowParents=ShowParents ShowNotes=@(ShowNotes && SelectedStrategy=="Folder")
             Tags=@Parents.SelectMany(x => x.Tags).Distinct().OrderBy(x => x).ToArray() />
}

@code {
    [Parameter, EditorRequired]
    public string FolderPath { get; set; } = string.Empty;

    Dictionary<string, AbfParentInfo[]> ParentsByPath = new();

    Dictionary<string, string> NotesByPath = new();

    AbfParentInfo[] Parents => ParentsByPath.Values.SelectMany(x => x).ToArray();

    bool IsScanning { get; set; } = true;

    bool ShowParents { get; set; } = true;

    bool ShowNotes { get; set; } = true;

    bool ShowMeta { get; set; } = true;

    string ExperimentTxt = string.Empty;

    string ExperimentJson = string.Empty;

    Dictionary<string, IGroupStrategy> GroupStrategies = new()
        {
            {"Folder" , new GroupByFolder() },
            {"Color" , new GroupByColor() },
            {"Header" , new GroupByHeader() },
            {"Tag" , new GroupByTag() },
        };

    string SelectedStrategy { get; set; } = "Folder";

    protected override Task OnInitializedAsync()
    {
        return Task.Run(() => Scan());
    }

    private void Scan()
    {
        string txtFilePath = Path.Combine(FolderPath, "experiment.txt");
        ExperimentTxt = File.Exists(txtFilePath) ? File.ReadAllText(txtFilePath) : string.Empty;

        string jsonFilePath = Path.Combine(FolderPath, "experiment.json");
        ExperimentJson = File.Exists(jsonFilePath) ? File.ReadAllText(jsonFilePath) : string.Empty;

        string[] dirs = Directory.GetDirectories(FolderPath);

        foreach (string subFolderPath in dirs)
        {
            AbfParentInfo[] parents = AbfParentInfo.GetParentsInFolder(subFolderPath);
            if (parents.Any())
            {
                ParentsByPath[subFolderPath] = parents;
                NotesByPath[subFolderPath] = Core.AbfFolderNotesFile.FromFolder(subFolderPath).GetText();
            }
        }

        IsScanning = false;
    }
}

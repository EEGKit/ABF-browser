@page "/AbfFolder"
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using ProjectServer.Components;

<nav>
    <!-- navigation area -->
    <div class="p-2" style="background-color: #f1f1f1;">
        <h2>ABF Browser</h2>
        <div class="lh-1" style="font-family: Consolas; font-size: .8em; white-space: nowrap;">

            <!-- show a link to every level of the current folder -->
            @for (int i = 0; i < RootFolderPaths.Length; i++)
            {
                string path = RootFolderPaths[i];
                string folderName = (path.Length < 4) ? path.Trim('\\') : System.IO.Path.GetFileName(path);

                <div>
                    @foreach (var _ in Enumerable.Range(0, i))
                    {
                        <span>&nbsp;</span>
                    }

                    <a href='' @onclick="(()=>SetFolderPath(path))">@folderName</a>
                </div>
            }

            <!-- show sub folders if this is not an ABF folder-->
            @if (!IsAbfFolder)
            {
                @foreach (string path in SubFolderPaths)
                {
                    <div>
                        @foreach (var _ in Enumerable.Range(0, RootFolderPaths.Length))
                        {
                            <span>&nbsp;</span>
                        }
                        <a href='' @onclick="(()=>SetFolderPath(path))">@Path.GetFileName(path)</a>
                    </div>
                }
            }
        </div>

        <div class="mt-2 d-flex gap-1">
            <button class="button-small" onclick="CopyToClipboard('@FolderPath.Replace("\\","/")')">copy path</button>
            <button class="button-small" onclick="CopyToClipboard('@GetThisUrl()')">copy URL</button>
            @if (IsAbfFolder)
            {
                <button class="button-small" @onclick=ClickedDailyNotes>daily notes</button>
            }
            else
            {
                <button class="button-small" @onclick=ClickedCreateSubfolder>new folder</button>
            }
        </div>

        @if (IsAbfFolder)
        {
            <div class="form-check mt-2 ms-1" style="font-family: monospace; font-size: .8em;">
                <input class="form-check-input" type="checkbox" @bind=IsAutoAnalyzed>
                <label class="form-check-label">
                    Auto-Analyze
                </label>
            </div>

            @if (IsAutoAnalyzed)
            {
                <div class="form-check mt-2 ms-1" style="font-family: monospace; font-size: .8em;">
                    <input class="form-check-input" type="checkbox" @bind=AutoRefresh>
                    <label class="form-check-label">
                        Auto-Refresh
                    </label>
                </div>
            }
        }

    </div>

    <!-- ABF list -->
    @if (IsAbfFolder)
    {
        <h2 class="p-2">ABF Folder</h2>
        <CellsMenu FolderPath=@FolderPath OnSelectParent=@OnSelectParent @ref="CellsMenuRef" />
    }

</nav>

<main>
    @if (CreateSubfolder)
    {
        <NewFolder FolderPath=@FolderPath OnFolderCreated=@NewFolderCreated />
    }
    else if (IsEmptyFolder)
    {
        <AbfDayInfo FolderPath=@FolderPath />
    }
    else if (IsAbfFolder)
    {
        @if (SelectedParent is not null)
        {
            <CellDetails Parent=@SelectedParent OnInfoChanged=@UpdateMenuFromDisk @ref="CellsDetailsRef" />
        }
        else
        {
            <AbfDayInfo FolderPath=@FolderPath />
        }
    }
    else
    {
        if (PathContainsAbfFolders(FolderPath))
        {
            <AbfMultiFolder FolderPath="@FolderPath" />
        }
        else
        {
            <h2 class="p-2">Folder does not contain ABF files</h2>
        }
    }
</main>

@code {
    string FolderPath = string.Empty;

    string[] RootFolderPaths = Array.Empty<string>();

    string[] SubFolderPaths = Array.Empty<string>();
    string[] FilePaths = Array.Empty<string>();
    bool IsAbfFolder;
    bool IsEmptyFolder;

    bool _isAutoAnalyzed;
    bool IsAutoAnalyzed
    {
        get => _isAutoAnalyzed;
        set
        {
            _isAutoAnalyzed = value;
            Core.AutoAnalysis.SetWatched(FolderPath, value);
        }
    }

    private bool CreateSubfolder { get; set; } = false;

    private System.Threading.Timer? RefreshTimer;
    private bool AutoRefresh = false;

    Domain.AbfParentInfo? SelectedParent = null;
    CellsMenu CellsMenuRef = null!;
    CellDetails CellsDetailsRef = null!;

    protected override void OnInitialized()
    {
        string initialPath = @"X:\Data\zProjects\Aging and Cholinergics\experiments\10 uM CCh (bath app)";
        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("folder", out StringValues folderQueryValues))
            initialPath = folderQueryValues.First();
        SetFolderPath(initialPath, updateUrl: false);

        RefreshTimer = new System.Threading.Timer(
            callback: async _ => { if (AutoRefresh) { await InvokeAsync(UpdateMenuFromDisk); } },
            state: null,
            dueTime: 0,
            period: 5_000);
    }

    /// <summary>
    /// Load a folder path in the viewer.
    /// If it is an ABF folder, display it as such.
    /// If not, display it as a file browser.
    /// </summary>
    /// <param name="path"></param>
    private void SetFolderPath(string path, bool updateUrl = true)
    {
        // scan the folder
        FolderPath = path;
        RootFolderPaths = GetRootFolderPaths(path);
        SubFolderPaths = Directory.GetDirectories(path);
        FilePaths = Directory.GetFiles(path);
        IsAbfFolder = FilePaths.Where(x => x.EndsWith(".abf")).Any();
        IsEmptyFolder = (FilePaths.Count() < 2) && (SubFolderPaths.Count() == 0);
        _isAutoAnalyzed = Core.AutoAnalysis.IsWatched(path);
        CreateSubfolder = false;
        AutoRefresh = false;
        SelectedParent = null;

        if (updateUrl)
            UpdateUrl();
    }

    /// <summary>
    /// Return full paths for every folder level of the given path
    /// </summary>
    private static string[] GetRootFolderPaths(string path)
    {
        path = path.TrimEnd('/');
        path = path.TrimEnd('\\');
        List<string> paths = new();
        while (!string.IsNullOrEmpty(path))
        {
            paths.Insert(0, path);
            path = Path.GetDirectoryName(path) ?? string.Empty;
        }
        return paths.ToArray();
    }

    /// <summary>
    /// Called when the user clicks a parent in the menu
    /// </summary>
    private void OnSelectParent(AbfParentInfo parent)
    {
        SelectedParent = parent;
        UpdateUrl();
    }

    /// <summary>
    /// Called when cells.txt has been modified
    /// </summary>
    private async Task UpdateMenuFromDisk()
    {
        await CellsMenuRef.UpdateMenuFromDisk();
        StateHasChanged();
    }

    private void NewFolderCreated(string path)
    {
        SetFolderPath(path);
    }

    private void ClickedDailyNotes()
    {
        CreateSubfolder = false;
        SelectedParent = null;
        UpdateUrl();
    }

    private void ClickedCreateSubfolder()
    {
        CreateSubfolder = true;
    }

    private void UpdateUrl()
    {
        try
        {
            NavManager.NavigateTo(GetThisUrl());
        }
        catch (Microsoft.AspNetCore.Components.NavigationException ex)
        {
            System.Diagnostics.Debug.WriteLine($"Navigation error: {ex}");
        }
    }

    private string GetThisUrl()
    {
        string path = System.Net.WebUtility.UrlEncode(FolderPath);
        string url = NavManager.BaseUri + $"AbfFolder?folder={path}";
        if (SelectedParent is not null)
            url += $"&abfid={SelectedParent.AbfID}";
        return url;
    }

    private static bool PathContainsAbfFolders(string path)
    {
        foreach (string subFolder in Directory.GetDirectories(path))
        {
            if (Directory.GetFiles(subFolder, "*.abf").Any())
                return true;
        }

        return false;
    }
}
